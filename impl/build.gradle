import aQute.bnd.gradle.Bundle
import aQute.bnd.gradle.Resolve
import aQute.bnd.gradle.TestOSGi

plugins {
    id 'biz.aQute.bnd.builder'
    id 'org.jetbrains.kotlin.jvm'
    id 'java-library'
}

sourceSets {
    integrationTest {
        kotlin {
            srcDirs = [ 'src/integration-test/kotlin' ]
        }
    }
}

configurations {
    testCompileOnly.extendsFrom compileOnly
    integrationTestApi.extendsFrom testApi
    integrationTestCompileOnly.extendsFrom testCompileOnly
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly

    [ compileClasspath, testCompileClasspath, integrationTestCompileClasspath ].forEach {
        it.exclude module: 'kotlin-stdlib-jdk8'
    }
}

dependencies {
    api "org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlin_version"
    api "org.jetbrains:annotations:$jetbrains_annotations_version"
    api project(':api')

    compileOnly "org.osgi:osgi.annotation:$osgi_version"
    compileOnly "org.osgi:osgi.core:$osgi_version"
    compileOnly "org.osgi:org.osgi.service.component.annotations:$osgi_component_annotations_version"
    implementation "org.slf4j:slf4j-api:$slf4j_version"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
    testRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"

    integrationTestRuntimeOnly "org.junit.platform:junit-platform-launcher:$junit_platform_version"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.framework:$felix_version"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.scr:$felix_scr_version"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.log:$felix_log_version"
    integrationTestRuntimeOnly "org.osgi:org.osgi.service.log:$osgi_log_version"
    integrationTestRuntimeOnly "org.osgi:org.osgi.util.pushstream:$osgi_pushstream_version"
    integrationTestRuntimeOnly "org.osgi:osgi.promise:$osgi_version"
}

//compile 'org.apache.felix:org.apache.felix.main:5.4.0',
//        'org.osgi:org.osgi.compendium:5.0.0',
//        'org.apache.felix:org.apache.felix.dependencymanager:4.2.0'
//


def testingBundle = tasks.register('testingBundle', Bundle) {
    archiveClassifier = 'tests'
    from sourceSets.integrationTest.output
    sourceSet = sourceSets.integrationTest

    manifest {
        // Bnd 5.2.0 will automatically include the archiveClassifier in the generated Bundle-SymbolicName.
        attributes('Bundle-SymbolicName': '\${task.archiveBaseName}-\${task.archiveClassifier}')
        attributes('Test-Cases': '\${classes;HIERARCHY_INDIRECTLY_ANNOTATED;org.junit.platform.commons.annotation.Testable;CONCRETE}')
    }
}

def resolve = tasks.register('resolve', Resolve) {
    bundles sourceSets.integrationTest.runtimeClasspath
    bndrun = 'test.bndrun'
}

def testOSGi = tasks.register('testOSGi', TestOSGi) {
    mustRunAfter resolve
    bundles sourceSets.integrationTest.runtimeClasspath
    bndrun = 'test.bndrun'
}

def check = tasks.named('check') {
    dependsOn resolve, testOSGi
}

artifacts {
    archives testingBundle.flatMap { it.archiveFile }
}
